import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Button } from "./ui/button";
import { Badge } from "./ui/badge";
import { Input } from "./ui/input";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "./ui/table";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "./ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./ui/tabs";
import { 
  Mail, 
  Send, 
  Clock, 
  CheckCircle, 
  XCircle, 
  Eye,
  Users,
  Calendar,
  Filter,
  RefreshCw,
  Plus
} from "lucide-react";
import { toast } from "sonner";
import { Textarea } from "./ui/textarea";
import { Label } from "./ui/label";
import { Switch } from "./ui/switch";

interface EmailTemplate {
  id: string;
  name: string;
  subject: string;
  body: string;
  type: 'welcome' | 'course_reminder' | 'payment_reminder' | 'completion' | 'custom';
  isActive: boolean;
  createdAt: string;
}

interface EmailLog {
  id: string;
  to: string;
  subject: string;
  template: string;
  status: 'sent' | 'pending' | 'failed';
  sentAt: string;
  openedAt?: string;
  clickedAt?: string;
}

export function EmailManagement() {
  const [templates, setTemplates] = useState<EmailTemplate[]>([]);
  const [emailLogs, setEmailLogs] = useState<EmailLog[]>([]);
  const [loading, setLoading] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<EmailTemplate | null>(null);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [formData, setFormData] = useState<Partial<EmailTemplate>>({
    name: "",
    subject: "",
    body: "",
    type: "custom",
    isActive: true
  });

  // Mock data
  useEffect(() => {
    const mockTemplates: EmailTemplate[] = [
      {
        id: "1",
        name: "Email ch√†o m·ª´ng",
        subject: "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi trung t√¢m ti·∫øng Nh·∫≠t!",
        body: "Xin ch√†o {{name}},\n\nCh√∫ng t√¥i r·∫•t vui m·ª´ng ch√†o ƒë√≥n b·∫°n ƒë·∫øn v·ªõi trung t√¢m ti·∫øng Nh·∫≠t. H√†nh tr√¨nh h·ªçc t·∫≠p th√∫ v·ªã c·ªßa b·∫°n s·∫Ω b·∫Øt ƒë·∫ßu t·ª´ ƒë√¢y!\n\nTr√¢n tr·ªçng,\nƒê·ªôi ng≈© gi√°o vi√™n",
        type: "welcome",
        isActive: true,
        createdAt: "2024-01-01T10:00:00Z"
      },
      {
        id: "2",
        name: "Nh·∫Øc nh·ªü thanh to√°n",
        subject: "Nh·∫Øc nh·ªü thanh to√°n h·ªçc ph√≠ - M√£ ƒëƒÉng k√Ω {{registrationId}}",
        body: "Xin ch√†o {{name}},\n\nCh√∫ng t√¥i nh·∫≠n th·∫•y b·∫°n ch∆∞a ho√†n t·∫•t thanh to√°n cho kh√≥a h·ªçc {{courseName}}.\n\nVui l√≤ng ho√†n t·∫•t thanh to√°n trong v√≤ng 24h ƒë·ªÉ gi·ªØ ch·ªó h·ªçc.\n\nTr√¢n tr·ªçng!",
        type: "payment_reminder",
        isActive: true,
        createdAt: "2024-01-02T10:00:00Z"
      },
      {
        id: "3",
        name: "Ho√†n th√†nh kh√≥a h·ªçc",
        subject: "üéâ Ch√∫c m·ª´ng b·∫°n ho√†n th√†nh kh√≥a h·ªçc {{courseName}}!",
        body: "Xin ch√†o {{name}},\n\nCh√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh kh√≥a h·ªçc {{courseName}} v·ªõi k·∫øt qu·∫£ xu·∫•t s·∫Øc!\n\nK·∫øt qu·∫£ c·ªßa b·∫°n: {{score}}/100\nCh·ª©ng ch·ªâ s·∫Ω ƒë∆∞·ª£c g·ª≠i trong 3-5 ng√†y l√†m vi·ªác.\n\nC·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng ch·ªçn ch√∫ng t√¥i!",
        type: "completion",
        isActive: true,
        createdAt: "2024-01-03T10:00:00Z"
      }
    ];

    const mockEmailLogs: EmailLog[] = [
      {
        id: "1",
        to: "student@example.com",
        subject: "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi trung t√¢m ti·∫øng Nh·∫≠t!",
        template: "Email ch√†o m·ª´ng",
        status: "sent",
        sentAt: "2024-01-15T09:30:00Z",
        openedAt: "2024-01-15T10:15:00Z"
      },
      {
        id: "2",
        to: "learner@example.com",
        subject: "Nh·∫Øc nh·ªü thanh to√°n h·ªçc ph√≠ - M√£ ƒëƒÉng k√Ω REG123456",
        template: "Nh·∫Øc nh·ªü thanh to√°n",
        status: "sent",
        sentAt: "2024-01-14T14:20:00Z",
        openedAt: "2024-01-14T15:30:00Z",
        clickedAt: "2024-01-14T15:35:00Z"
      },
      {
        id: "3",
        to: "newbie@example.com",
        subject: "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi trung t√¢m ti·∫øng Nh·∫≠t!",
        template: "Email ch√†o m·ª´ng",
        status: "pending",
        sentAt: "2024-01-15T16:00:00Z"
      },
      {
        id: "4",
        to: "graduate@example.com",
        subject: "üéâ Ch√∫c m·ª´ng b·∫°n ho√†n th√†nh kh√≥a h·ªçc N5!",
        template: "Ho√†n th√†nh kh√≥a h·ªçc",
        status: "sent",
        sentAt: "2024-01-13T11:00:00Z",
        openedAt: "2024-01-13T11:45:00Z"
      }
    ];

    setTemplates(mockTemplates);
    setEmailLogs(mockEmailLogs);
  }, []);

  const handleCreateTemplate = () => {
    const newTemplate: EmailTemplate = {
      ...formData as EmailTemplate,
      id: Date.now().toString(),
      createdAt: new Date().toISOString()
    };
    
    setTemplates([...templates, newTemplate]);
    setIsCreateModalOpen(false);
    setFormData({
      name: "",
      subject: "",
      body: "",
      type: "custom",
      isActive: true
    });
    toast.success("T·∫°o template email th√†nh c√¥ng!");
  };

  const handleToggleTemplate = (templateId: string) => {
    setTemplates(templates.map(template => 
      template.id === templateId 
        ? { ...template, isActive: !template.isActive }
        : template
    ));
    toast.success("C·∫≠p nh·∫≠t tr·∫°ng th√°i template th√†nh c√¥ng!");
  };

  const handleDeleteTemplate = (templateId: string) => {
    setTemplates(templates.filter(template => template.id !== templateId));
    toast.success("X√≥a template th√†nh c√¥ng!");
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'sent':
        return <Badge className="bg-green-500 text-white"><CheckCircle className="w-3 h-3 mr-1" />ƒê√£ g·ª≠i</Badge>;
      case 'pending':
        return <Badge className="bg-yellow-500 text-white"><Clock className="w-3 h-3 mr-1" />ƒêang g·ª≠i</Badge>;
      case 'failed':
        return <Badge variant="destructive"><XCircle className="w-3 h-3 mr-1" />Th·∫•t b·∫°i</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'welcome':
        return 'üëã';
      case 'course_reminder':
        return 'üìö';
      case 'payment_reminder':
        return 'üí≥';
      case 'completion':
        return 'üéâ';
      case 'custom':
      default:
        return 'üìß';
    }
  };

  const stats = {
    totalTemplates: templates.length,
    activeTemplates: templates.filter(t => t.isActive).length,
    totalSent: emailLogs.filter(e => e.status === 'sent').length,
    openRate: Math.round((emailLogs.filter(e => e.openedAt).length / emailLogs.filter(e => e.status === 'sent').length) * 100) || 0
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">Qu·∫£n l√Ω Email</h2>
        <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="w-4 h-4 mr-2" />
              T·∫°o template m·ªõi
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>T·∫°o Email Template</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label>T√™n template</Label>
                  <Input
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                    placeholder="VD: Email ch√†o m·ª´ng"
                  />
                </div>
                <div>
                  <Label>Lo·∫°i email</Label>
                  <Select value={formData.type} onValueChange={(value) => setFormData({...formData, type: value as any})}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="welcome">Ch√†o m·ª´ng</SelectItem>
                      <SelectItem value="course_reminder">Nh·∫Øc nh·ªü kh√≥a h·ªçc</SelectItem>
                      <SelectItem value="payment_reminder">Nh·∫Øc nh·ªü thanh to√°n</SelectItem>
                      <SelectItem value="completion">Ho√†n th√†nh kh√≥a h·ªçc</SelectItem>
                      <SelectItem value="custom">T√πy ch·ªânh</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <Label>Ch·ªß ƒë·ªÅ email</Label>
                <Input
                  value={formData.subject}
                  onChange={(e) => setFormData({...formData, subject: e.target.value})}
                  placeholder="VD: Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi trung t√¢m!"
                />
                <p className="text-xs text-muted-foreground mt-1">
                  S·ª≠ d·ª•ng c√°c bi·∫øn: {"{{name}}"}, {"{{courseName}}"}, {"{{registrationId}}"}, {"{{score}}"}
                </p>
              </div>

              <div>
                <Label>N·ªôi dung email</Label>
                <Textarea
                  value={formData.body}
                  onChange={(e) => setFormData({...formData, body: e.target.value})}
                  placeholder="Nh·∫≠p n·ªôi dung email..."
                  rows={8}
                />
                <p className="text-xs text-muted-foreground mt-1">
                  H·ªó tr·ª£ c√°c bi·∫øn ƒë·ªông nh∆∞ tr√™n v√† HTML c∆° b·∫£n
                </p>
              </div>

              <div className="flex items-center space-x-2">
                <Switch
                  checked={formData.isActive}
                  onCheckedChange={(checked) => setFormData({...formData, isActive: checked})}
                />
                <Label>K√≠ch ho·∫°t template</Label>
              </div>

              <Button onClick={handleCreateTemplate} className="w-full">
                T·∫°o Template
              </Button>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Templates</CardTitle>
            <Mail className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalTemplates}</div>
            <div className="text-xs text-muted-foreground">
              {stats.activeTemplates} ƒëang ho·∫°t ƒë·ªông
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Email ƒë√£ g·ª≠i</CardTitle>
            <Send className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">{stats.totalSent}</div>
            <div className="text-xs text-muted-foreground">
              Trong th√°ng n√†y
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">T·ª∑ l·ªá m·ªü email</CardTitle>
            <Eye className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">{stats.openRate}%</div>
            <div className="text-xs text-muted-foreground">
              Trung b√¨nh
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Email h√¥m nay</CardTitle>
            <Calendar className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600">
              {emailLogs.filter(e => new Date(e.sentAt).toDateString() === new Date().toDateString()).length}
            </div>
            <div className="text-xs text-muted-foreground">
              ƒê√£ g·ª≠i h√¥m nay
            </div>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="templates" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="templates">Email Templates</TabsTrigger>
          <TabsTrigger value="logs">Email Logs</TabsTrigger>
        </TabsList>

        <TabsContent value="templates" className="space-y-6 mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Email Templates ({templates.length})</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {templates.map((template) => (
                  <Card key={template.id} className="p-4">
                    <div className="flex items-start justify-between">
                      <div className="flex items-start space-x-3 flex-1">
                        <div className="text-2xl">{getTypeIcon(template.type)}</div>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2 mb-2">
                            <h3 className="font-semibold">{template.name}</h3>
                            {template.isActive ? (
                              <Badge className="bg-green-500 text-white">Ho·∫°t ƒë·ªông</Badge>
                            ) : (
                              <Badge variant="outline">T·∫°m d·ª´ng</Badge>
                            )}
                          </div>
                          <p className="text-sm text-muted-foreground mb-2">{template.subject}</p>
                          <p className="text-xs text-muted-foreground line-clamp-2">{template.body}</p>
                          <p className="text-xs text-muted-foreground mt-2">
                            T·∫°o: {new Date(template.createdAt).toLocaleDateString('vi-VN')}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Dialog>
                          <DialogTrigger asChild>
                            <Button variant="outline" size="sm" onClick={() => setSelectedTemplate(template)}>
                              <Eye className="h-3 w-3 mr-1" />
                              Xem
                            </Button>
                          </DialogTrigger>
                          <DialogContent className="max-w-2xl">
                            <DialogHeader>
                              <DialogTitle>Chi ti·∫øt Template: {template.name}</DialogTitle>
                            </DialogHeader>
                            {selectedTemplate && (
                              <div className="space-y-4">
                                <div className="grid grid-cols-2 gap-4">
                                  <div>
                                    <Label className="text-sm font-medium text-muted-foreground">T√™n</Label>
                                    <p>{selectedTemplate.name}</p>
                                  </div>
                                  <div>
                                    <Label className="text-sm font-medium text-muted-foreground">Lo·∫°i</Label>
                                    <p>{getTypeIcon(selectedTemplate.type)} {selectedTemplate.type}</p>
                                  </div>
                                </div>
                                <div>
                                  <Label className="text-sm font-medium text-muted-foreground">Ch·ªß ƒë·ªÅ</Label>
                                  <p className="font-medium">{selectedTemplate.subject}</p>
                                </div>
                                <div>
                                  <Label className="text-sm font-medium text-muted-foreground">N·ªôi dung</Label>
                                  <div className="bg-muted p-3 rounded-lg whitespace-pre-wrap text-sm">
                                    {selectedTemplate.body}
                                  </div>
                                </div>
                              </div>
                            )}
                          </DialogContent>
                        </Dialog>
                        
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => handleToggleTemplate(template.id)}
                        >
                          {template.isActive ? 'T·∫°m d·ª´ng' : 'K√≠ch ho·∫°t'}
                        </Button>
                        
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => handleDeleteTemplate(template.id)}
                        >
                          X√≥a
                        </Button>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="logs" className="space-y-6 mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Email Logs ({emailLogs.length})</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Ng∆∞·ªùi nh·∫≠n</TableHead>
                    <TableHead>Ch·ªß ƒë·ªÅ</TableHead>
                    <TableHead>Template</TableHead>
                    <TableHead>Tr·∫°ng th√°i</TableHead>
                    <TableHead>Th·ªùi gian g·ª≠i</TableHead>
                    <TableHead>Ho·∫°t ƒë·ªông</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {emailLogs.map((log) => (
                    <TableRow key={log.id}>
                      <TableCell>{log.to}</TableCell>
                      <TableCell className="max-w-xs truncate">{log.subject}</TableCell>
                      <TableCell>{log.template}</TableCell>
                      <TableCell>{getStatusBadge(log.status)}</TableCell>
                      <TableCell>
                        {new Date(log.sentAt).toLocaleString('vi-VN')}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-2 text-xs">
                          {log.openedAt && (
                            <Badge variant="secondary" className="text-xs">
                              <Eye className="w-2 h-2 mr-1" />
                              ƒê√£ m·ªü
                            </Badge>
                          )}
                          {log.clickedAt && (
                            <Badge className="bg-blue-500 text-white text-xs">
                              ƒê√£ click
                            </Badge>
                          )}
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
